// source: idcheck/v2/id_check.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.idcheck.v2.Address', null, global);
goog.exportSymbol('proto.idcheck.v2.CheckRequest', null, global);
goog.exportSymbol('proto.idcheck.v2.CheckRequest.IdCheckCase', null, global);
goog.exportSymbol('proto.idcheck.v2.CheckResponse', null, global);
goog.exportSymbol('proto.idcheck.v2.DeleteRequest', null, global);
goog.exportSymbol('proto.idcheck.v2.DeleteResponse', null, global);
goog.exportSymbol('proto.idcheck.v2.GetRequest', null, global);
goog.exportSymbol('proto.idcheck.v2.GetResponse', null, global);
goog.exportSymbol('proto.idcheck.v2.IdCheck', null, global);
goog.exportSymbol('proto.idcheck.v2.IdType', null, global);
goog.exportSymbol('proto.idcheck.v2.Licence', null, global);
goog.exportSymbol('proto.idcheck.v2.NationalId', null, global);
goog.exportSymbol('proto.idcheck.v2.Passport', null, global);
goog.exportSymbol('proto.idcheck.v2.Status', null, global);
goog.exportSymbol('proto.idcheck.v2.Watchlist', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idcheck.v2.CheckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.idcheck.v2.CheckRequest.oneofGroups_);
};
goog.inherits(proto.idcheck.v2.CheckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idcheck.v2.CheckRequest.displayName = 'proto.idcheck.v2.CheckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idcheck.v2.CheckResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idcheck.v2.CheckResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idcheck.v2.CheckResponse.displayName = 'proto.idcheck.v2.CheckResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idcheck.v2.GetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idcheck.v2.GetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idcheck.v2.GetRequest.displayName = 'proto.idcheck.v2.GetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idcheck.v2.GetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.idcheck.v2.GetResponse.repeatedFields_, null);
};
goog.inherits(proto.idcheck.v2.GetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idcheck.v2.GetResponse.displayName = 'proto.idcheck.v2.GetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idcheck.v2.DeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idcheck.v2.DeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idcheck.v2.DeleteRequest.displayName = 'proto.idcheck.v2.DeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idcheck.v2.DeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idcheck.v2.DeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idcheck.v2.DeleteResponse.displayName = 'proto.idcheck.v2.DeleteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idcheck.v2.Passport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idcheck.v2.Passport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idcheck.v2.Passport.displayName = 'proto.idcheck.v2.Passport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idcheck.v2.Licence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idcheck.v2.Licence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idcheck.v2.Licence.displayName = 'proto.idcheck.v2.Licence';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idcheck.v2.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idcheck.v2.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idcheck.v2.Address.displayName = 'proto.idcheck.v2.Address';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idcheck.v2.NationalId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idcheck.v2.NationalId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idcheck.v2.NationalId.displayName = 'proto.idcheck.v2.NationalId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idcheck.v2.Watchlist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idcheck.v2.Watchlist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idcheck.v2.Watchlist.displayName = 'proto.idcheck.v2.Watchlist';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idcheck.v2.IdCheck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idcheck.v2.IdCheck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idcheck.v2.IdCheck.displayName = 'proto.idcheck.v2.IdCheck';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.idcheck.v2.CheckRequest.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.idcheck.v2.CheckRequest.IdCheckCase = {
  ID_CHECK_NOT_SET: 0,
  PASSPORT: 2,
  LICENCE: 3,
  ADDRESS: 4,
  NATIONAL_ID: 5,
  WATCHLIST: 6
};

/**
 * @return {proto.idcheck.v2.CheckRequest.IdCheckCase}
 */
proto.idcheck.v2.CheckRequest.prototype.getIdCheckCase = function() {
  return /** @type {proto.idcheck.v2.CheckRequest.IdCheckCase} */(jspb.Message.computeOneofCase(this, proto.idcheck.v2.CheckRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.idcheck.v2.CheckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.idcheck.v2.CheckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.idcheck.v2.CheckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.CheckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    passport: (f = msg.getPassport()) && proto.idcheck.v2.Passport.toObject(includeInstance, f),
    licence: (f = msg.getLicence()) && proto.idcheck.v2.Licence.toObject(includeInstance, f),
    address: (f = msg.getAddress()) && proto.idcheck.v2.Address.toObject(includeInstance, f),
    nationalId: (f = msg.getNationalId()) && proto.idcheck.v2.NationalId.toObject(includeInstance, f),
    watchlist: (f = msg.getWatchlist()) && proto.idcheck.v2.Watchlist.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idcheck.v2.CheckRequest}
 */
proto.idcheck.v2.CheckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idcheck.v2.CheckRequest;
  return proto.idcheck.v2.CheckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idcheck.v2.CheckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idcheck.v2.CheckRequest}
 */
proto.idcheck.v2.CheckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityId(value);
      break;
    case 2:
      var value = new proto.idcheck.v2.Passport;
      reader.readMessage(value,proto.idcheck.v2.Passport.deserializeBinaryFromReader);
      msg.setPassport(value);
      break;
    case 3:
      var value = new proto.idcheck.v2.Licence;
      reader.readMessage(value,proto.idcheck.v2.Licence.deserializeBinaryFromReader);
      msg.setLicence(value);
      break;
    case 4:
      var value = new proto.idcheck.v2.Address;
      reader.readMessage(value,proto.idcheck.v2.Address.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 5:
      var value = new proto.idcheck.v2.NationalId;
      reader.readMessage(value,proto.idcheck.v2.NationalId.deserializeBinaryFromReader);
      msg.setNationalId(value);
      break;
    case 6:
      var value = new proto.idcheck.v2.Watchlist;
      reader.readMessage(value,proto.idcheck.v2.Watchlist.deserializeBinaryFromReader);
      msg.setWatchlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idcheck.v2.CheckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idcheck.v2.CheckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idcheck.v2.CheckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.CheckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassport();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.idcheck.v2.Passport.serializeBinaryToWriter
    );
  }
  f = message.getLicence();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.idcheck.v2.Licence.serializeBinaryToWriter
    );
  }
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.idcheck.v2.Address.serializeBinaryToWriter
    );
  }
  f = message.getNationalId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.idcheck.v2.NationalId.serializeBinaryToWriter
    );
  }
  f = message.getWatchlist();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.idcheck.v2.Watchlist.serializeBinaryToWriter
    );
  }
};


/**
 * optional string entity_id = 1;
 * @return {string}
 */
proto.idcheck.v2.CheckRequest.prototype.getEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.CheckRequest} returns this
 */
proto.idcheck.v2.CheckRequest.prototype.setEntityId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Passport passport = 2;
 * @return {?proto.idcheck.v2.Passport}
 */
proto.idcheck.v2.CheckRequest.prototype.getPassport = function() {
  return /** @type{?proto.idcheck.v2.Passport} */ (
    jspb.Message.getWrapperField(this, proto.idcheck.v2.Passport, 2));
};


/**
 * @param {?proto.idcheck.v2.Passport|undefined} value
 * @return {!proto.idcheck.v2.CheckRequest} returns this
*/
proto.idcheck.v2.CheckRequest.prototype.setPassport = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.idcheck.v2.CheckRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.idcheck.v2.CheckRequest} returns this
 */
proto.idcheck.v2.CheckRequest.prototype.clearPassport = function() {
  return this.setPassport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idcheck.v2.CheckRequest.prototype.hasPassport = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Licence licence = 3;
 * @return {?proto.idcheck.v2.Licence}
 */
proto.idcheck.v2.CheckRequest.prototype.getLicence = function() {
  return /** @type{?proto.idcheck.v2.Licence} */ (
    jspb.Message.getWrapperField(this, proto.idcheck.v2.Licence, 3));
};


/**
 * @param {?proto.idcheck.v2.Licence|undefined} value
 * @return {!proto.idcheck.v2.CheckRequest} returns this
*/
proto.idcheck.v2.CheckRequest.prototype.setLicence = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.idcheck.v2.CheckRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.idcheck.v2.CheckRequest} returns this
 */
proto.idcheck.v2.CheckRequest.prototype.clearLicence = function() {
  return this.setLicence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idcheck.v2.CheckRequest.prototype.hasLicence = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Address address = 4;
 * @return {?proto.idcheck.v2.Address}
 */
proto.idcheck.v2.CheckRequest.prototype.getAddress = function() {
  return /** @type{?proto.idcheck.v2.Address} */ (
    jspb.Message.getWrapperField(this, proto.idcheck.v2.Address, 4));
};


/**
 * @param {?proto.idcheck.v2.Address|undefined} value
 * @return {!proto.idcheck.v2.CheckRequest} returns this
*/
proto.idcheck.v2.CheckRequest.prototype.setAddress = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.idcheck.v2.CheckRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.idcheck.v2.CheckRequest} returns this
 */
proto.idcheck.v2.CheckRequest.prototype.clearAddress = function() {
  return this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idcheck.v2.CheckRequest.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional NationalId national_id = 5;
 * @return {?proto.idcheck.v2.NationalId}
 */
proto.idcheck.v2.CheckRequest.prototype.getNationalId = function() {
  return /** @type{?proto.idcheck.v2.NationalId} */ (
    jspb.Message.getWrapperField(this, proto.idcheck.v2.NationalId, 5));
};


/**
 * @param {?proto.idcheck.v2.NationalId|undefined} value
 * @return {!proto.idcheck.v2.CheckRequest} returns this
*/
proto.idcheck.v2.CheckRequest.prototype.setNationalId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.idcheck.v2.CheckRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.idcheck.v2.CheckRequest} returns this
 */
proto.idcheck.v2.CheckRequest.prototype.clearNationalId = function() {
  return this.setNationalId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idcheck.v2.CheckRequest.prototype.hasNationalId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Watchlist watchlist = 6;
 * @return {?proto.idcheck.v2.Watchlist}
 */
proto.idcheck.v2.CheckRequest.prototype.getWatchlist = function() {
  return /** @type{?proto.idcheck.v2.Watchlist} */ (
    jspb.Message.getWrapperField(this, proto.idcheck.v2.Watchlist, 6));
};


/**
 * @param {?proto.idcheck.v2.Watchlist|undefined} value
 * @return {!proto.idcheck.v2.CheckRequest} returns this
*/
proto.idcheck.v2.CheckRequest.prototype.setWatchlist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.idcheck.v2.CheckRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.idcheck.v2.CheckRequest} returns this
 */
proto.idcheck.v2.CheckRequest.prototype.clearWatchlist = function() {
  return this.setWatchlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idcheck.v2.CheckRequest.prototype.hasWatchlist = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.idcheck.v2.CheckResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.idcheck.v2.CheckResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.idcheck.v2.CheckResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.CheckResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    idCheck: (f = msg.getIdCheck()) && proto.idcheck.v2.IdCheck.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idcheck.v2.CheckResponse}
 */
proto.idcheck.v2.CheckResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idcheck.v2.CheckResponse;
  return proto.idcheck.v2.CheckResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idcheck.v2.CheckResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idcheck.v2.CheckResponse}
 */
proto.idcheck.v2.CheckResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.idcheck.v2.IdCheck;
      reader.readMessage(value,proto.idcheck.v2.IdCheck.deserializeBinaryFromReader);
      msg.setIdCheck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idcheck.v2.CheckResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idcheck.v2.CheckResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idcheck.v2.CheckResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.CheckResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdCheck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.idcheck.v2.IdCheck.serializeBinaryToWriter
    );
  }
};


/**
 * optional IdCheck id_check = 1;
 * @return {?proto.idcheck.v2.IdCheck}
 */
proto.idcheck.v2.CheckResponse.prototype.getIdCheck = function() {
  return /** @type{?proto.idcheck.v2.IdCheck} */ (
    jspb.Message.getWrapperField(this, proto.idcheck.v2.IdCheck, 1));
};


/**
 * @param {?proto.idcheck.v2.IdCheck|undefined} value
 * @return {!proto.idcheck.v2.CheckResponse} returns this
*/
proto.idcheck.v2.CheckResponse.prototype.setIdCheck = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.idcheck.v2.CheckResponse} returns this
 */
proto.idcheck.v2.CheckResponse.prototype.clearIdCheck = function() {
  return this.setIdCheck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idcheck.v2.CheckResponse.prototype.hasIdCheck = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.idcheck.v2.GetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.idcheck.v2.GetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.idcheck.v2.GetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.GetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idcheck.v2.GetRequest}
 */
proto.idcheck.v2.GetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idcheck.v2.GetRequest;
  return proto.idcheck.v2.GetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idcheck.v2.GetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idcheck.v2.GetRequest}
 */
proto.idcheck.v2.GetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idcheck.v2.GetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idcheck.v2.GetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idcheck.v2.GetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.GetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string entity_id = 1;
 * @return {string}
 */
proto.idcheck.v2.GetRequest.prototype.getEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.GetRequest} returns this
 */
proto.idcheck.v2.GetRequest.prototype.setEntityId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.idcheck.v2.GetResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.idcheck.v2.GetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.idcheck.v2.GetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.idcheck.v2.GetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.GetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    checksList: jspb.Message.toObjectList(msg.getChecksList(),
    proto.idcheck.v2.IdCheck.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idcheck.v2.GetResponse}
 */
proto.idcheck.v2.GetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idcheck.v2.GetResponse;
  return proto.idcheck.v2.GetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idcheck.v2.GetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idcheck.v2.GetResponse}
 */
proto.idcheck.v2.GetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.idcheck.v2.IdCheck;
      reader.readMessage(value,proto.idcheck.v2.IdCheck.deserializeBinaryFromReader);
      msg.addChecks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idcheck.v2.GetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idcheck.v2.GetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idcheck.v2.GetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.GetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChecksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.idcheck.v2.IdCheck.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IdCheck checks = 1;
 * @return {!Array<!proto.idcheck.v2.IdCheck>}
 */
proto.idcheck.v2.GetResponse.prototype.getChecksList = function() {
  return /** @type{!Array<!proto.idcheck.v2.IdCheck>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.idcheck.v2.IdCheck, 1));
};


/**
 * @param {!Array<!proto.idcheck.v2.IdCheck>} value
 * @return {!proto.idcheck.v2.GetResponse} returns this
*/
proto.idcheck.v2.GetResponse.prototype.setChecksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.idcheck.v2.IdCheck=} opt_value
 * @param {number=} opt_index
 * @return {!proto.idcheck.v2.IdCheck}
 */
proto.idcheck.v2.GetResponse.prototype.addChecks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.idcheck.v2.IdCheck, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.idcheck.v2.GetResponse} returns this
 */
proto.idcheck.v2.GetResponse.prototype.clearChecksList = function() {
  return this.setChecksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.idcheck.v2.DeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.idcheck.v2.DeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.idcheck.v2.DeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.DeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idcheck.v2.DeleteRequest}
 */
proto.idcheck.v2.DeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idcheck.v2.DeleteRequest;
  return proto.idcheck.v2.DeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idcheck.v2.DeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idcheck.v2.DeleteRequest}
 */
proto.idcheck.v2.DeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idcheck.v2.DeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idcheck.v2.DeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idcheck.v2.DeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.DeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string entity_id = 1;
 * @return {string}
 */
proto.idcheck.v2.DeleteRequest.prototype.getEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.DeleteRequest} returns this
 */
proto.idcheck.v2.DeleteRequest.prototype.setEntityId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.idcheck.v2.DeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.idcheck.v2.DeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.idcheck.v2.DeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.DeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idcheck.v2.DeleteResponse}
 */
proto.idcheck.v2.DeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idcheck.v2.DeleteResponse;
  return proto.idcheck.v2.DeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idcheck.v2.DeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idcheck.v2.DeleteResponse}
 */
proto.idcheck.v2.DeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idcheck.v2.DeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idcheck.v2.DeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idcheck.v2.DeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.DeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.idcheck.v2.Passport.prototype.toObject = function(opt_includeInstance) {
  return proto.idcheck.v2.Passport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.idcheck.v2.Passport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.Passport.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expiry: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idcheck.v2.Passport}
 */
proto.idcheck.v2.Passport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idcheck.v2.Passport;
  return proto.idcheck.v2.Passport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idcheck.v2.Passport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idcheck.v2.Passport}
 */
proto.idcheck.v2.Passport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpiry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idcheck.v2.Passport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idcheck.v2.Passport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idcheck.v2.Passport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.Passport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpiry();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string number = 1;
 * @return {string}
 */
proto.idcheck.v2.Passport.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.Passport} returns this
 */
proto.idcheck.v2.Passport.prototype.setNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string expiry = 2;
 * @return {string}
 */
proto.idcheck.v2.Passport.prototype.getExpiry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.Passport} returns this
 */
proto.idcheck.v2.Passport.prototype.setExpiry = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.idcheck.v2.Licence.prototype.toObject = function(opt_includeInstance) {
  return proto.idcheck.v2.Licence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.idcheck.v2.Licence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.Licence.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idcheck.v2.Licence}
 */
proto.idcheck.v2.Licence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idcheck.v2.Licence;
  return proto.idcheck.v2.Licence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idcheck.v2.Licence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idcheck.v2.Licence}
 */
proto.idcheck.v2.Licence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idcheck.v2.Licence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idcheck.v2.Licence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idcheck.v2.Licence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.Licence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string number = 1;
 * @return {string}
 */
proto.idcheck.v2.Licence.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.Licence} returns this
 */
proto.idcheck.v2.Licence.prototype.setNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.idcheck.v2.Licence.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.Licence} returns this
 */
proto.idcheck.v2.Licence.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.idcheck.v2.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.idcheck.v2.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.idcheck.v2.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitNumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    streetNumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    streetName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    streetType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    suburb: jspb.Message.getFieldWithDefault(msg, 5, ""),
    city: jspb.Message.getFieldWithDefault(msg, 6, ""),
    region: jspb.Message.getFieldWithDefault(msg, 7, ""),
    postcode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    country: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idcheck.v2.Address}
 */
proto.idcheck.v2.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idcheck.v2.Address;
  return proto.idcheck.v2.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idcheck.v2.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idcheck.v2.Address}
 */
proto.idcheck.v2.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreetNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreetName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreetType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSuburb(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostcode(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idcheck.v2.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idcheck.v2.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idcheck.v2.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnitNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStreetNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStreetName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStreetType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSuburb();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPostcode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string unit_number = 1;
 * @return {string}
 */
proto.idcheck.v2.Address.prototype.getUnitNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.Address} returns this
 */
proto.idcheck.v2.Address.prototype.setUnitNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string street_number = 2;
 * @return {string}
 */
proto.idcheck.v2.Address.prototype.getStreetNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.Address} returns this
 */
proto.idcheck.v2.Address.prototype.setStreetNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string street_name = 3;
 * @return {string}
 */
proto.idcheck.v2.Address.prototype.getStreetName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.Address} returns this
 */
proto.idcheck.v2.Address.prototype.setStreetName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string street_type = 4;
 * @return {string}
 */
proto.idcheck.v2.Address.prototype.getStreetType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.Address} returns this
 */
proto.idcheck.v2.Address.prototype.setStreetType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string suburb = 5;
 * @return {string}
 */
proto.idcheck.v2.Address.prototype.getSuburb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.Address} returns this
 */
proto.idcheck.v2.Address.prototype.setSuburb = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string city = 6;
 * @return {string}
 */
proto.idcheck.v2.Address.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.Address} returns this
 */
proto.idcheck.v2.Address.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string region = 7;
 * @return {string}
 */
proto.idcheck.v2.Address.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.Address} returns this
 */
proto.idcheck.v2.Address.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string postcode = 8;
 * @return {string}
 */
proto.idcheck.v2.Address.prototype.getPostcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.Address} returns this
 */
proto.idcheck.v2.Address.prototype.setPostcode = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string country = 9;
 * @return {string}
 */
proto.idcheck.v2.Address.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.Address} returns this
 */
proto.idcheck.v2.Address.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.idcheck.v2.NationalId.prototype.toObject = function(opt_includeInstance) {
  return proto.idcheck.v2.NationalId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.idcheck.v2.NationalId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.NationalId.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idcheck.v2.NationalId}
 */
proto.idcheck.v2.NationalId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idcheck.v2.NationalId;
  return proto.idcheck.v2.NationalId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idcheck.v2.NationalId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idcheck.v2.NationalId}
 */
proto.idcheck.v2.NationalId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idcheck.v2.NationalId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idcheck.v2.NationalId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idcheck.v2.NationalId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.NationalId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string number = 1;
 * @return {string}
 */
proto.idcheck.v2.NationalId.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.NationalId} returns this
 */
proto.idcheck.v2.NationalId.prototype.setNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.idcheck.v2.Watchlist.prototype.toObject = function(opt_includeInstance) {
  return proto.idcheck.v2.Watchlist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.idcheck.v2.Watchlist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.Watchlist.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idcheck.v2.Watchlist}
 */
proto.idcheck.v2.Watchlist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idcheck.v2.Watchlist;
  return proto.idcheck.v2.Watchlist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idcheck.v2.Watchlist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idcheck.v2.Watchlist}
 */
proto.idcheck.v2.Watchlist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idcheck.v2.Watchlist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idcheck.v2.Watchlist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idcheck.v2.Watchlist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.Watchlist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.idcheck.v2.IdCheck.prototype.toObject = function(opt_includeInstance) {
  return proto.idcheck.v2.IdCheck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.idcheck.v2.IdCheck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.IdCheck.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    entityId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    idType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    verified: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    detail: jspb.Message.getFieldWithDefault(msg, 6, ""),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idcheck.v2.IdCheck}
 */
proto.idcheck.v2.IdCheck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idcheck.v2.IdCheck;
  return proto.idcheck.v2.IdCheck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idcheck.v2.IdCheck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idcheck.v2.IdCheck}
 */
proto.idcheck.v2.IdCheck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityId(value);
      break;
    case 3:
      var value = /** @type {!proto.idcheck.v2.IdType} */ (reader.readEnum());
      msg.setIdType(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerified(value);
      break;
    case 5:
      var value = /** @type {!proto.idcheck.v2.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetail(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idcheck.v2.IdCheck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idcheck.v2.IdCheck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idcheck.v2.IdCheck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idcheck.v2.IdCheck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEntityId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIdType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getVerified();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getDetail();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.idcheck.v2.IdCheck.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.IdCheck} returns this
 */
proto.idcheck.v2.IdCheck.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string entity_id = 2;
 * @return {string}
 */
proto.idcheck.v2.IdCheck.prototype.getEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.IdCheck} returns this
 */
proto.idcheck.v2.IdCheck.prototype.setEntityId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional IdType id_type = 3;
 * @return {!proto.idcheck.v2.IdType}
 */
proto.idcheck.v2.IdCheck.prototype.getIdType = function() {
  return /** @type {!proto.idcheck.v2.IdType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.idcheck.v2.IdType} value
 * @return {!proto.idcheck.v2.IdCheck} returns this
 */
proto.idcheck.v2.IdCheck.prototype.setIdType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool verified = 4;
 * @return {boolean}
 */
proto.idcheck.v2.IdCheck.prototype.getVerified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.idcheck.v2.IdCheck} returns this
 */
proto.idcheck.v2.IdCheck.prototype.setVerified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Status status = 5;
 * @return {!proto.idcheck.v2.Status}
 */
proto.idcheck.v2.IdCheck.prototype.getStatus = function() {
  return /** @type {!proto.idcheck.v2.Status} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.idcheck.v2.Status} value
 * @return {!proto.idcheck.v2.IdCheck} returns this
 */
proto.idcheck.v2.IdCheck.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string detail = 6;
 * @return {string}
 */
proto.idcheck.v2.IdCheck.prototype.getDetail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.idcheck.v2.IdCheck} returns this
 */
proto.idcheck.v2.IdCheck.prototype.setDetail = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional google.protobuf.Timestamp updated_at = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.idcheck.v2.IdCheck.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.idcheck.v2.IdCheck} returns this
*/
proto.idcheck.v2.IdCheck.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.idcheck.v2.IdCheck} returns this
 */
proto.idcheck.v2.IdCheck.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idcheck.v2.IdCheck.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * @enum {number}
 */
proto.idcheck.v2.IdType = {
  ID_TYPE_PASSPORT: 0,
  ID_TYPE_LICENCE: 1,
  ID_TYPE_ADDRESS: 2,
  ID_TYPE_NATIONALID: 3,
  ID_TYPE_WATCHLIST: 4
};

/**
 * @enum {number}
 */
proto.idcheck.v2.Status = {
  STATUS_FULL_MATCH: 0,
  STATUS_PART_MATCH: 1,
  STATUS_NO_MATCH: 2,
  STATUS_NO_DATA: 3,
  STATUS_ERROR: 4,
  STATUS_UNCHECKED: 5
};

goog.object.extend(exports, proto.idcheck.v2);
