// source: kyccertifier/v1/kyc_certifier.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var vcissuer_v1_vc_issuer_pb = require('../../vcissuer/v1/vc_issuer_pb.js');
goog.object.extend(proto, vcissuer_v1_vc_issuer_pb);
goog.exportSymbol('proto.kyccertifier.v1.AddPersonRequest', null, global);
goog.exportSymbol('proto.kyccertifier.v1.AddPersonRequest.CustomerCase', null, global);
goog.exportSymbol('proto.kyccertifier.v1.AddPersonResponse', null, global);
goog.exportSymbol('proto.kyccertifier.v1.VerifyIdRequest', null, global);
goog.exportSymbol('proto.kyccertifier.v1.VerifyIdRequest.IdCase', null, global);
goog.exportSymbol('proto.kyccertifier.v1.VerifyIdResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kyccertifier.v1.AddPersonRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.kyccertifier.v1.AddPersonRequest.oneofGroups_);
};
goog.inherits(proto.kyccertifier.v1.AddPersonRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kyccertifier.v1.AddPersonRequest.displayName = 'proto.kyccertifier.v1.AddPersonRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kyccertifier.v1.AddPersonResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kyccertifier.v1.AddPersonResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kyccertifier.v1.AddPersonResponse.displayName = 'proto.kyccertifier.v1.AddPersonResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kyccertifier.v1.VerifyIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.kyccertifier.v1.VerifyIdRequest.oneofGroups_);
};
goog.inherits(proto.kyccertifier.v1.VerifyIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kyccertifier.v1.VerifyIdRequest.displayName = 'proto.kyccertifier.v1.VerifyIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kyccertifier.v1.VerifyIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kyccertifier.v1.VerifyIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.kyccertifier.v1.VerifyIdResponse.displayName = 'proto.kyccertifier.v1.VerifyIdResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.kyccertifier.v1.AddPersonRequest.oneofGroups_ = [[4,5]];

/**
 * @enum {number}
 */
proto.kyccertifier.v1.AddPersonRequest.CustomerCase = {
  CUSTOMER_NOT_SET: 0,
  CREATE: 4,
  CUSTOMER_ID: 5
};

/**
 * @return {proto.kyccertifier.v1.AddPersonRequest.CustomerCase}
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.getCustomerCase = function() {
  return /** @type {proto.kyccertifier.v1.AddPersonRequest.CustomerCase} */(jspb.Message.computeOneofCase(this, proto.kyccertifier.v1.AddPersonRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kyccertifier.v1.AddPersonRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kyccertifier.v1.AddPersonRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kyccertifier.v1.AddPersonRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    consented: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    shareable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    ownBehalf: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    create: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    customerId: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kyccertifier.v1.AddPersonRequest}
 */
proto.kyccertifier.v1.AddPersonRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kyccertifier.v1.AddPersonRequest;
  return proto.kyccertifier.v1.AddPersonRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kyccertifier.v1.AddPersonRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kyccertifier.v1.AddPersonRequest}
 */
proto.kyccertifier.v1.AddPersonRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConsented(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShareable(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOwnBehalf(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCreate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kyccertifier.v1.AddPersonRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kyccertifier.v1.AddPersonRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kyccertifier.v1.AddPersonRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsented();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getShareable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getOwnBehalf();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional bool consented = 1;
 * @return {boolean}
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.getConsented = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.kyccertifier.v1.AddPersonRequest} returns this
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.setConsented = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool shareable = 2;
 * @return {boolean}
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.getShareable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.kyccertifier.v1.AddPersonRequest} returns this
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.setShareable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool own_behalf = 3;
 * @return {boolean}
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.getOwnBehalf = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.kyccertifier.v1.AddPersonRequest} returns this
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.setOwnBehalf = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool create = 4;
 * @return {boolean}
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.getCreate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.kyccertifier.v1.AddPersonRequest} returns this
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.setCreate = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.kyccertifier.v1.AddPersonRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kyccertifier.v1.AddPersonRequest} returns this
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.clearCreate = function() {
  return jspb.Message.setOneofField(this, 4, proto.kyccertifier.v1.AddPersonRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.hasCreate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string customer_id = 5;
 * @return {string}
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.getCustomerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.kyccertifier.v1.AddPersonRequest} returns this
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.setCustomerId = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.kyccertifier.v1.AddPersonRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.kyccertifier.v1.AddPersonRequest} returns this
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.clearCustomerId = function() {
  return jspb.Message.setOneofField(this, 5, proto.kyccertifier.v1.AddPersonRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kyccertifier.v1.AddPersonRequest.prototype.hasCustomerId = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kyccertifier.v1.AddPersonResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kyccertifier.v1.AddPersonResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kyccertifier.v1.AddPersonResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kyccertifier.v1.AddPersonResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    identityId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kyccertifier.v1.AddPersonResponse}
 */
proto.kyccertifier.v1.AddPersonResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kyccertifier.v1.AddPersonResponse;
  return proto.kyccertifier.v1.AddPersonResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kyccertifier.v1.AddPersonResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kyccertifier.v1.AddPersonResponse}
 */
proto.kyccertifier.v1.AddPersonResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentityId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kyccertifier.v1.AddPersonResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kyccertifier.v1.AddPersonResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kyccertifier.v1.AddPersonResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kyccertifier.v1.AddPersonResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string identity_id = 1;
 * @return {string}
 */
proto.kyccertifier.v1.AddPersonResponse.prototype.getIdentityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kyccertifier.v1.AddPersonResponse} returns this
 */
proto.kyccertifier.v1.AddPersonResponse.prototype.setIdentityId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.kyccertifier.v1.VerifyIdRequest.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.kyccertifier.v1.VerifyIdRequest.IdCase = {
  ID_NOT_SET: 0,
  ADDRESS: 2,
  LICENCE: 3,
  NATIONAL_ID: 4,
  PASSPORT: 5,
  EXEMPTION: 6
};

/**
 * @return {proto.kyccertifier.v1.VerifyIdRequest.IdCase}
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.getIdCase = function() {
  return /** @type {proto.kyccertifier.v1.VerifyIdRequest.IdCase} */(jspb.Message.computeOneofCase(this, proto.kyccertifier.v1.VerifyIdRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kyccertifier.v1.VerifyIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kyccertifier.v1.VerifyIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kyccertifier.v1.VerifyIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    identityId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: (f = msg.getAddress()) && vcissuer_v1_vc_issuer_pb.Address.toObject(includeInstance, f),
    licence: (f = msg.getLicence()) && vcissuer_v1_vc_issuer_pb.Licence.toObject(includeInstance, f),
    nationalId: (f = msg.getNationalId()) && vcissuer_v1_vc_issuer_pb.NationalId.toObject(includeInstance, f),
    passport: (f = msg.getPassport()) && vcissuer_v1_vc_issuer_pb.Passport.toObject(includeInstance, f),
    exemption: (f = msg.getExemption()) && vcissuer_v1_vc_issuer_pb.Exemption.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kyccertifier.v1.VerifyIdRequest}
 */
proto.kyccertifier.v1.VerifyIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kyccertifier.v1.VerifyIdRequest;
  return proto.kyccertifier.v1.VerifyIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kyccertifier.v1.VerifyIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kyccertifier.v1.VerifyIdRequest}
 */
proto.kyccertifier.v1.VerifyIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentityId(value);
      break;
    case 2:
      var value = new vcissuer_v1_vc_issuer_pb.Address;
      reader.readMessage(value,vcissuer_v1_vc_issuer_pb.Address.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 3:
      var value = new vcissuer_v1_vc_issuer_pb.Licence;
      reader.readMessage(value,vcissuer_v1_vc_issuer_pb.Licence.deserializeBinaryFromReader);
      msg.setLicence(value);
      break;
    case 4:
      var value = new vcissuer_v1_vc_issuer_pb.NationalId;
      reader.readMessage(value,vcissuer_v1_vc_issuer_pb.NationalId.deserializeBinaryFromReader);
      msg.setNationalId(value);
      break;
    case 5:
      var value = new vcissuer_v1_vc_issuer_pb.Passport;
      reader.readMessage(value,vcissuer_v1_vc_issuer_pb.Passport.deserializeBinaryFromReader);
      msg.setPassport(value);
      break;
    case 6:
      var value = new vcissuer_v1_vc_issuer_pb.Exemption;
      reader.readMessage(value,vcissuer_v1_vc_issuer_pb.Exemption.deserializeBinaryFromReader);
      msg.setExemption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kyccertifier.v1.VerifyIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kyccertifier.v1.VerifyIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kyccertifier.v1.VerifyIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      vcissuer_v1_vc_issuer_pb.Address.serializeBinaryToWriter
    );
  }
  f = message.getLicence();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vcissuer_v1_vc_issuer_pb.Licence.serializeBinaryToWriter
    );
  }
  f = message.getNationalId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      vcissuer_v1_vc_issuer_pb.NationalId.serializeBinaryToWriter
    );
  }
  f = message.getPassport();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      vcissuer_v1_vc_issuer_pb.Passport.serializeBinaryToWriter
    );
  }
  f = message.getExemption();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      vcissuer_v1_vc_issuer_pb.Exemption.serializeBinaryToWriter
    );
  }
};


/**
 * optional string identity_id = 1;
 * @return {string}
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.getIdentityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.kyccertifier.v1.VerifyIdRequest} returns this
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.setIdentityId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional vcissuer.v1.Address address = 2;
 * @return {?proto.vcissuer.v1.Address}
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.getAddress = function() {
  return /** @type{?proto.vcissuer.v1.Address} */ (
    jspb.Message.getWrapperField(this, vcissuer_v1_vc_issuer_pb.Address, 2));
};


/**
 * @param {?proto.vcissuer.v1.Address|undefined} value
 * @return {!proto.kyccertifier.v1.VerifyIdRequest} returns this
*/
proto.kyccertifier.v1.VerifyIdRequest.prototype.setAddress = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.kyccertifier.v1.VerifyIdRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kyccertifier.v1.VerifyIdRequest} returns this
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.clearAddress = function() {
  return this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional vcissuer.v1.Licence licence = 3;
 * @return {?proto.vcissuer.v1.Licence}
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.getLicence = function() {
  return /** @type{?proto.vcissuer.v1.Licence} */ (
    jspb.Message.getWrapperField(this, vcissuer_v1_vc_issuer_pb.Licence, 3));
};


/**
 * @param {?proto.vcissuer.v1.Licence|undefined} value
 * @return {!proto.kyccertifier.v1.VerifyIdRequest} returns this
*/
proto.kyccertifier.v1.VerifyIdRequest.prototype.setLicence = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.kyccertifier.v1.VerifyIdRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kyccertifier.v1.VerifyIdRequest} returns this
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.clearLicence = function() {
  return this.setLicence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.hasLicence = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional vcissuer.v1.NationalId national_id = 4;
 * @return {?proto.vcissuer.v1.NationalId}
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.getNationalId = function() {
  return /** @type{?proto.vcissuer.v1.NationalId} */ (
    jspb.Message.getWrapperField(this, vcissuer_v1_vc_issuer_pb.NationalId, 4));
};


/**
 * @param {?proto.vcissuer.v1.NationalId|undefined} value
 * @return {!proto.kyccertifier.v1.VerifyIdRequest} returns this
*/
proto.kyccertifier.v1.VerifyIdRequest.prototype.setNationalId = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.kyccertifier.v1.VerifyIdRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kyccertifier.v1.VerifyIdRequest} returns this
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.clearNationalId = function() {
  return this.setNationalId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.hasNationalId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional vcissuer.v1.Passport passport = 5;
 * @return {?proto.vcissuer.v1.Passport}
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.getPassport = function() {
  return /** @type{?proto.vcissuer.v1.Passport} */ (
    jspb.Message.getWrapperField(this, vcissuer_v1_vc_issuer_pb.Passport, 5));
};


/**
 * @param {?proto.vcissuer.v1.Passport|undefined} value
 * @return {!proto.kyccertifier.v1.VerifyIdRequest} returns this
*/
proto.kyccertifier.v1.VerifyIdRequest.prototype.setPassport = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.kyccertifier.v1.VerifyIdRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kyccertifier.v1.VerifyIdRequest} returns this
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.clearPassport = function() {
  return this.setPassport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.hasPassport = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional vcissuer.v1.Exemption exemption = 6;
 * @return {?proto.vcissuer.v1.Exemption}
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.getExemption = function() {
  return /** @type{?proto.vcissuer.v1.Exemption} */ (
    jspb.Message.getWrapperField(this, vcissuer_v1_vc_issuer_pb.Exemption, 6));
};


/**
 * @param {?proto.vcissuer.v1.Exemption|undefined} value
 * @return {!proto.kyccertifier.v1.VerifyIdRequest} returns this
*/
proto.kyccertifier.v1.VerifyIdRequest.prototype.setExemption = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.kyccertifier.v1.VerifyIdRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.kyccertifier.v1.VerifyIdRequest} returns this
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.clearExemption = function() {
  return this.setExemption(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.kyccertifier.v1.VerifyIdRequest.prototype.hasExemption = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kyccertifier.v1.VerifyIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kyccertifier.v1.VerifyIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kyccertifier.v1.VerifyIdResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kyccertifier.v1.VerifyIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    verified: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kyccertifier.v1.VerifyIdResponse}
 */
proto.kyccertifier.v1.VerifyIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kyccertifier.v1.VerifyIdResponse;
  return proto.kyccertifier.v1.VerifyIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kyccertifier.v1.VerifyIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kyccertifier.v1.VerifyIdResponse}
 */
proto.kyccertifier.v1.VerifyIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerified(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kyccertifier.v1.VerifyIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kyccertifier.v1.VerifyIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kyccertifier.v1.VerifyIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kyccertifier.v1.VerifyIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerified();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool verified = 1;
 * @return {boolean}
 */
proto.kyccertifier.v1.VerifyIdResponse.prototype.getVerified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.kyccertifier.v1.VerifyIdResponse} returns this
 */
proto.kyccertifier.v1.VerifyIdResponse.prototype.setVerified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.kyccertifier.v1.VerifyIdResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.kyccertifier.v1.VerifyIdResponse} returns this
 */
proto.kyccertifier.v1.VerifyIdResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.kyccertifier.v1);
